<?php
declare(strict_types=1);

namespace App\Controller;

use App\Form\UploadForm;

/**
 * Files Controller
 *
 * @property \App\Model\Table\FilesTable $Files
 * @method \App\Model\Entity\File[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 * @property \FileUpload\Controller\Component\UploadComponent $Upload
 * @property \FileUpload\Controller\Component\DownloadComponent $Download
 */
class FilesController extends AppController
{
    /**
     * @throws \Exception
     */
    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadComponent('FileUpload.Upload', [
            'fieldName' => 'file',
            'storagePath' => 'fileupload.tutorial', // bucket name
            'storage_type' => 's3'
        ]);

        $this->loadComponent('FileUpload.Download', [
            'storagePath' => 'fileupload.tutorial', // bucket name
            'storage_type' => 's3'
        ]);
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index()
    {
        $files = $this->paginate($this->Files);

        $this->set(compact('files'));
    }

    /**
     * View method
     *
     * @param string|null $id File id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $file = $this->Files->get($id, [
            'contain' => [],
        ]);

        $this->set(compact('file'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $file = $this->Files->newEmptyEntity();
        if ($this->request->is('post')) {
            $file = $this->Files->patchEntity($file, $this->request->getData());
            if ($this->Files->save($file)) {
                $this->Flash->success(__('The file has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The file could not be saved. Please, try again.'));
        }
        $this->set(compact('file'));
    }

    /**
     * Edit method
     *
     * @param string|null $id File id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $file = $this->Files->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $file = $this->Files->patchEntity($file, $this->request->getData());
            if ($this->Files->save($file)) {
                $this->Flash->success(__('The file has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The file could not be saved. Please, try again.'));
        }
        $this->set(compact('file'));
    }

    /**
     * Delete method
     *
     * @param string|null $id File id.
     * @return \Cake\Http\Response|null|void Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $file = $this->Files->get($id);
        if ($this->Files->delete($file)) {
            $this->Flash->success(__('The file has been deleted.'));
        } else {
            $this->Flash->error(__('The file could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    /**
     * @return \Cake\Http\Response|void|null
     * @throws \HttpException
     */
    public function upload()
    {
        $uploadForm = new UploadForm();

        if ($this->request->is('post')) {
            $uploadedFile = $this->Upload->getFile($this->request);

            $file = $this->Files->newEmptyEntity();

            $file->name = $uploadedFile->getFileName();
            $file->path = $uploadedFile->getPath();

            $this->Files->save($file);

            return $this->redirect(['action' => 'index']);
        }

        $this->set(compact('uploadForm'));
    }

    /**
     * @param $fileName
     * @return \Cake\Http\Response
     */
    public function download($fileName)
    {
        $downloadedFile = $this->Download->getFile($fileName);

        $response = $this->response;
        $response = $response->withStringBody($downloadedFile->getFileContent());
        $response = $response->withType($downloadedFile->getFileType());

        if ($this->request->getParam('?.download') == true) {
            $response = $response->withDownload($fileName);
        }

        return $response;
    }
}
